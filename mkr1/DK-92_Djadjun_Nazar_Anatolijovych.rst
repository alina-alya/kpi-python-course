==============================
Дядюн Назар Анатолійович
==============================


#. Наведіть команди git для додавання файлів та директорій ./dev ./dev/file.c ./.gitignore до локального репозиторію одним комітом
   (уважно).

   1) Для додавання файлів до локального репозиторію спочатку потрбно використати 
    - git init
    - git add шлях до файлу або назва. Повторити з необхідними файлами
    - git commit -m "назва коміту"
    - git remote посилання на репозиторій 
    - git push -u origin master яка завантажить файли

#. Для чого слугує файл .gitignore? Наведіть його синтаксис для виключення всіх файлів з розширенням .o в усіх директоріях та
   директорії build в корені репозиторію
   
   2) Такий файл слугує для ігнорування файлів з певним розширенням. Дозволяє також вказати, в якій саме директорії проводити 
   ігнорування файлів. Дозволяє додати виключення, тобто, ігнорувати всі файли, окрім якогось вказанного.

   *.о (для ігнорування всіх файлів з розширенням .о)
   build/ (ігноруються всі файли в директорії)

#. Оператор ідентичності та оператор ``==``. В чому їх відмінності? 
   Коли в умовних конструкціях варто використовувати той чи інший оператор?

   3) Оператор ідентичності is використовується для перевірки, наприклад, a is b, що a є такий же самий обʼєкт. 
   Оператор == використовується для порівняння, і може використовуватися для порівняння різних обʼєктів
   Виходячи з описанного вище, is оператор потрібно використовувати, коли необхідно перевірити, що імена посилаються на один
   і той же обʼєкт

#. Строкові типи Python. У чому відмінність між Unicode-строкою та байтовою строкою? Наведіть приклад коду, що представляє строку
   ``'вічність'`` у вигляді байтової строки з кодуванням UTF-8 та KOI8-U

   4) байтова строка, це просто набір байтів, який закодований згідно того чи іншого кодування. Unicode строка представляє собою 
   символи, які ми вже можемо прочитати, наприклад. Тобто переведені з байтового представлення в символьне, відповідно до кодування
   'вічність'.encode('UTF-8') 
   'вічність'.encode('KOI8-U') 

#. Docstring у функціях. Для чого використовуються? Наведіть приклад функції, що виконує розрахунок за певною формулою
   з області електроніки або фінансів (на власний розсуд) та містить Docsting (Coding Style – Google)
   
   5) Docstring використовується для документування коду. Навідміну від коментарів, які ставляться в коді, докстрінг допомагає
   користувачеві, або розробнику, який використовує бібліотеку, не розбираючись з кодом бібліотеки, отримати інформацію
   наприклад про аргументи які приймає функція і так далі.

#. Позиційні та лише-позиційні аргументи функцій. Яким чином функція може приймати довільне значення позиційних аргументів?
   Наведіть приклад (пов'язаний з галуззю електроніки, наприклад, розрахунок за формулою).

   6) При передачі позиційних аргументів в функцію, порядок аргументів що передались буде відповідати позиції
   яка вказана в функції. Тобто, для прикладу

   def func(a, b, /, c)
      print(a)
      ...
    тут, а і b це позиційні аргументи. Також задати при виклику функції їх можна як ключових, тобто
   func (b=1, a=2, c)
   с можна передати тільки як позиціний.

#. Конструкція умовного виконання Python. Яким чином можна реалізувати перевірку логічного виразу *A x B*, де x – XOR.
   Наведіть приклад коду.

   7) за допомогою конструкцій умовного виконання, можна виконувати код тільки за певної умови. Для вказано прикладу
   if logic_xor(str1, str2):
      print "done"
   else:
      print "fail"

#. Які цикли Python вам відомі? Яким чином можна примусово вийти з циклу?

   8) Цикл For і цикл While. В циклі for задається послідовність, і з кожною ітерацією код буде виконуватись. While схожий до нього
   Але, виконується, поки умова, яка зазначена, буде вірною. зупинити виконання циклу можна з допомогою break